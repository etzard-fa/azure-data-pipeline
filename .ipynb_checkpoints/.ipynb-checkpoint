{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'oauth2client'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-2a68db6ab0c3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mgspread\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0moauth2client\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'oauth2client'"
     ]
    }
   ],
   "source": [
    "import gspread\n",
    "import pandas as pd\n",
    "from oauth2client.service_account import ServiceAccountCredentials"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from apiclient.discovery import build\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "\n",
    "\n",
    "def get_service(api_name, api_version, scopes, key_file_location):\n",
    "    \"\"\"Get a service that communicates to a Google API.\n",
    "\n",
    "    Args:\n",
    "        api_name: The name of the api to connect to.\n",
    "        api_version: The api version to connect to.\n",
    "        scopes: A list auth scopes to authorize for the application.\n",
    "        key_file_location: The path to a valid service account JSON key file.\n",
    "\n",
    "    Returns:\n",
    "        A service that is connected to the specified API.\n",
    "    \"\"\"\n",
    "\n",
    "    credentials = ServiceAccountCredentials.from_json_keyfile_name(\n",
    "            key_file_location, scopes=scopes)\n",
    "\n",
    "    # Build the service object.\n",
    "    service = build(api_name, api_version, credentials=credentials)\n",
    "\n",
    "    return service\n",
    "\n",
    "\n",
    "def get_first_profile_id(service):\n",
    "    # Use the Analytics service object to get the first profile id.\n",
    "\n",
    "    # Get a list of all Google Analytics accounts for this user\n",
    "    accounts = service.management().accounts().list().execute()\n",
    "\n",
    "    if accounts.get('items'):\n",
    "        # Get the first Google Analytics account.\n",
    "        account = accounts.get('items')[0].get('id')\n",
    "\n",
    "        # Get a list of all the properties for the first account.\n",
    "        properties = service.management().webproperties().list(\n",
    "                accountId=account).execute()\n",
    "\n",
    "        if properties.get('items'):\n",
    "            # Get the first property id.\n",
    "            property = properties.get('items')[0].get('id')\n",
    "\n",
    "            # Get a list of all views (profiles) for the first property.\n",
    "            profiles = service.management().profiles().list(\n",
    "                    accountId=account,\n",
    "                    webPropertyId=property).execute()\n",
    "\n",
    "            if profiles.get('items'):\n",
    "                # return the first view (profile) id.\n",
    "                return profiles.get('items')[0].get('id')\n",
    "\n",
    "    return None\n",
    "\n",
    "\n",
    "def get_results(service, profile_id):\n",
    "    # Use the Analytics Service Object to query the Core Reporting API\n",
    "    # for the number of sessions within the past seven days.\n",
    "    return service.data().ga().get(\n",
    "            ids='ga:' + profile_id,\n",
    "            start_date='7daysAgo',\n",
    "            end_date='today',\n",
    "            metrics='ga:sessions').execute()\n",
    "\n",
    "\n",
    "def print_results(results):\n",
    "    # Print data nicely for the user.\n",
    "    if results:\n",
    "        print 'View (Profile):', results.get('profileInfo').get('profileName')\n",
    "        print 'Total Sessions:', results.get('rows')[0][0]\n",
    "\n",
    "    else:\n",
    "        print 'No results found'\n",
    "\n",
    "\n",
    "def main():\n",
    "    # Define the auth scopes to request.\n",
    "    scope = 'https://www.googleapis.com/auth/analytics.readonly'\n",
    "    key_file_location = '<REPLACE_WITH_JSON_FILE>'\n",
    "\n",
    "    # Authenticate and construct service.\n",
    "    service = get_service(\n",
    "            api_name='analytics',\n",
    "            api_version='v3',\n",
    "            scopes=[scope],\n",
    "            key_file_location=key_file_location)\n",
    "\n",
    "    profile_id = get_first_profile_id(service)\n",
    "    print_results(get_results(service, profile_id))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
